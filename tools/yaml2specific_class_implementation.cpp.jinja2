{# Little Less Protocol Suite - yaml converter
   Copyright (C) 2020 Frank Mueller

   SPDX-License-Identifier: MIT

   This is a template to generate ino files for Arduino.
#}
{% import 'macros.cpp.jinja2' as cpp with context %}
{% if ('baseProtocol' in yaml) and (yaml['baseProtocol'].value == 'LittleLessBase') %}

//////////////////////////////////////////////////
// Connection state handling
//////////////////////////////////////////////////

void {{ cpp.class() }}::handleConStateChanged(bool conState) {
  // ToDo
  // if (conState) {
  //   ..
  // } else {
  //   ..
  // }
}

{% endif %}
{% for cmd in yaml['commands'] %}

//////////////////////////////////////////////////
// {{ cmd | cmd_title }}
{% if 'description' in cmd %}
{{ cmd['description'].text | comment }}
{% endif %}
{% for message in cmd['messages'] %}
/////////////////////////
  {% if 'messageTypes' in message %}
// Message types: {% for types in message['messageTypes'] %}{{ types.text }}{% if not loop.last %}, {% endif %}{% endfor %}

  {% endif %}
  {% if 'senders' in message %}
// Senders: {% for sender in message['senders'] %}{{ sender.text }}{% if not loop.last %}, {% endif %}{% endfor %}

  {% endif %}
  {% if 'receivers' in message %}
// Receivers: {% for receiver in message['receivers'] %}{{ receiver.text }}{% if not loop.last %}, {% endif %}{% endfor %}

  {% endif %}
//
  {% if 'description' in message %}
{{ message['description'].text | comment }}
  {% endif %}
//
  {% if message['structureType'].text == 'markdown' %}
{{     message['structureDesc'].text | comment }}
  {% endif %}
{% endfor %}
//////////////////////////////////////////////////

bool {{ cpp.class() }}::canHandle{{ cmd['name'] | identifier }}(llp_MsgType msgType, llp_RxStruct &rx) {
  // ToDo
  // rx.buf = buffer;
  // rx.bufTotalSize = sizeof(buffer); 
  // return true;
  return false;
}

void {{ cpp.class() }}::handle{{ cmd['name'] | identifier }}Data(llp_MsgType msgType, llp_RxStruct &rx) {
  // ToDo
  // on error set rx.buf = NULL; to call handle{{ cmd['name'] | identifier }}Finish(false)
}

void {{ cpp.class() }}::handle{{ cmd['name'] | identifier }}Finish(llp_MsgType msgType, llp_result result) {
  // ToDo
  // if (llp_result::ok == result) {
  //   ..
  // } else {
  //   .. 
  // }
}

{% endfor %}
